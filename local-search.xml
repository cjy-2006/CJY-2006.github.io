<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/10/22/10.22/"/>
    <url>/2025/10/22/10.22/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>十月十九日日志</title>
    <link href="/2025/10/11/10.19/"/>
    <url>/2025/10/11/10.19/</url>
    
    <content type="html"><![CDATA[<ol><li><p>Bit最小单位<br>byte：字节大B   1byte&#x3D;bit<br>1Bit 仅能存储2个信息<br>1byte能存储2^8个信息</p></li><li><p>数据存储在寄存器，内存或磁盘中</p></li><li><p>整数的正负表示<br>a.有符号数<br>  最高位作符号位1表示负数，0表示正数，<br>b.无符号数：表示0和正数，无需表示正负，参与数字计算<br>只能是0-255</p></li><li><p>整数的编码<br>  原码，反码，补码<br>  a. 原码：与有符号数一样，符号位无法参加运算，例如十进制1-1&#x3D;0，用原码表示则是00000001+10000001得到结果10000010（十进制的-2）所以不用其作为整数编码<br>  b.反码：正数的反码：与原码（符号位 + 数值位的二进制表示）完全相同。<br> 负数的反码：符号位保持不变（仍为 1），其余数值位按位取反（0 变 1，1 变 0）。</p></li></ol><p>  c.补码 正数的补码就是原码<br>   负数的补码是其反码（将0改为1，将1改为0）加一，如-1补码为：11111111<br>    想求负数的绝对值就再取反+1<br>    0的补码还是0<br>    范围：-128————127<br>    再添加字字节时用符号位（正数是0，负数是1）</p><ol start="5"><li>整数的存储方式<br> 在十六进制数0x12 34 56  78  中12，被称为高位（高字节）78被称为地位（低字节）<br> 存储方式：低位优先即低位在低地址<br>    即78  56  34   12（十六进制的一位数字占2bit,两位数字占1byte故两位数字为一整体）<br> 高位存储：高位优先12 34 56 78高位放在低地址<br>  X86系统适用的是低位优先（intel &#x2F;window）<br> 例：0x00 00 00 01<br> 低位优先：01 00 00 00   little_endian<br> 高位优先：00 00 00 01   big_endian<br> ip数据报头使用网络字节序即高位优先</li></ol><p>浮点数定义和储存<br>定义：1.单精度浮点数：float，占4个字节<br>      2.双精度浮点数：double,占8个字节<br>      双精度比单精度精确<br>   例如<br>   float x &#x3D; 1.732f;          单精度<br>   double y - 3.1415926;      双精度<br>   加F就是单精度，不加就是双精度</p><p>浮点数的存储<br>a. 科学计数法<br>  二进制科学计数法类比十进制如<br>  1011.0 &#x3D; 1.01101*2^3,1.01101为尾数，3为指数，0为符号位（ 就是正负号）</p><p>  浮点数试讲特定长度的连续字节（4个或8字节）的所有二进制位（32位或64位）分割为三个域<br>  符号域    (S)  ，占1位，正数为0，负数为1<br>  阶码域：单精度中占8位，双进精度中占11位。对于单精度而言是指数+127，双精度是指数+1023，指数可能为正也能为负，不便与比较   阶码域为非负数便于比较<br>  尾数域（M）体现精度差别，单精度尾数共23位，双精度尾数有52位<br>       因为尾数都是1开头，所以可以不用储存，但使用时仍要带上1</p><pre><code class="hljs">   用于计算存储</code></pre><p>公式   V &#x3D; (-1)^s<em>M</em>2^e &#x3D;(-1)^S<em>M</em>2^(E-127)&#x2F;(E-1023)    e为指数   E为阶码<br>浮点数存储格式： 1符号位（0&#x2F;1）2.阶码（  二进制   指数+127&#x2F;1023  8位  ）  3. 尾数域(   M)浮点数的小数部分（二进制，补0至23位或48位）</p><p>M是浮点数转为二进制后的科学计数法小数部分再补0直到23位或是48位<br>阶码&#x3D;（指数+127&#x2F;1023）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>十月二十一 日日志</title>
    <link href="/2025/10/11/10.21/"/>
    <url>/2025/10/11/10.21/</url>
    
    <content type="html"><![CDATA[<ol><li>整型<br> short int 简写为short 短整型   2字节<br> int 标准整型    四字节<br> long int 简写long    四字节<br> longlong</li></ol><p>typedef:定义函数类比于import …as…<br>typedf 就函数名  新函数名</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>十月二十日日志</title>
    <link href="/2025/10/11/10.20/"/>
    <url>/2025/10/11/10.20/</url>
    
    <content type="html"><![CDATA[<p>浮点数阶码问题<br>FLOAT：E&#x3D; e+127<br>Double:E&#x3D; e+1023</p><p>阶码E为了方便比较，为无符号数0单精度八位：范围1<del>154，双精度11位，范围1</del>2046，表示了一个规格化的非零浮点数</p><p>阶码全为0，尾数全为0，表示0<br>阶码全是1，尾数全是0，表示正无穷或负无穷<br>阶码为0而尾数非0时，给出NaN非数</p><p>真正的指数为阶码减去127&#x2F;1023<br>由于阶码可能为正数或负数（如表示很小的数时阶码为负），计算机中通常用移码（Offset Binary）表示阶码，而非原码或补码，原因是移码的大小可直接反映阶码真值的大小，方便浮点数比较（如加减运算中的 “对阶” 操作）。</p><p>移码 &#x3D; 阶码真值 + 偏移量（Bias）<br>单精度浮点数的偏移量为127<br>双精度浮点数偏移量为1023</p><p>C语言数据类型—–内建型别</p><ol><li>字符型：char &#x2F; wchar_t<br>  char占一个字节<br>  wchar_t占2或4个字节，宽字符类型  ，字节数与字符数不同，不慎会导致严重后果<br>char c &#x3D;  ‘a’这是常量字符  若要表示单引号字符应该如此表示’&#39; ‘<br>wchar_t wc &#x3D;L’ c ‘           L表示unicode编码ASCii编码，unicode存储空间<br>字符也分有无符号<br>在char前标signed有符号unsiand是无符号，如果不标signed或signed有无符号由编译器决定<br> 例如windos vs 开发环境中看做有符号</li><li>字符编码<br>存饭字符要通过编码才能储存类比学号<br>ASCII编码用一个字节表示编码因此表示编码不多<br>unicode编码，通常采用2个或4个字节表示一个字符UTF-8占1-4字节<br>                                     UTF-16占2个<br>                                     utf-32占4个字节<br> 如果数字被打上引号则是字符类型应该参照 ascii编码表，如果不加引号就是整数<br> 字符整数相互转换<br> 字符转整数：字符-‘0 ‘<br> 整数转字符：整数+’ 0’<br> 大小写转换<br> 例如：char c &#x3D;’M’<br> c + ‘  a’-‘A’;&#x2F;&#x2F;大写转小写<br> char ch &#x3D;’ y’;<br> c+’A’-‘a’&#x2F;&#x2F;小写转大写</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>十月十八日日志</title>
    <link href="/2025/10/11/10.18/"/>
    <url>/2025/10/11/10.18/</url>
    
    <content type="html"><![CDATA[<ol><li><p>exe文件产生过程<br>源文件:a.c经过编译变成.obj文件再经过与lib(库文件)的链接最终变成.exe文件</p></li><li><p>pe格式<br>一种规范和标准，包含程序执行的代码，数据和资源<br>win:  exe. dll. sys.<br>linux:elf<br>等文件都属于pe格式的范畴<br>A. PE文件的格式<br>  ！<a href="pe%E6%A0%BC%E5%BC%8F.png">结构图</a><br>   a. DOS部首名为：MZ即e_magic<br>二进制代码查看部首对应值为“Ox5a4d”,其中”4d”代表M”5a”代表“z”<br>DOSStub:一串字符串。Win32 和x64并不能运行DOS<br>   b.pe文件头<br>以pe\0\0开头<br>在image_optional_header32的数据目录表中存有该PE文件的导入表和导出表（包含所调用的函数名称和地址等等）<br>   c.块表：记录每一个块(section)的所在位置<br>   d.块（section）：并不固定程序在编译和链接过程中，编译器会将代码和数据按照 “类型” 分配到不section 中，链接器再通过这些 section 组织最终的可执行文件。常见的默认 section 包括：<br>.text：存放可执行代码（函数体），通常是只读的。<br>.data：存放已初始化的全局变量或静态变量（非零值）。<br>.bss：存放未初始化的全局变量或静态变量（默认值为 0），仅占符号表空间，不占用实际文件大小。<br>.rodata：存放只读数据（如字符串常量）。<br>.stack：栈空间（运行时动态分配，不存放在目标文件中）。<br>.heap：堆空间（运行时动态分配，不存放在目标文件中）。<br>   e.调试信息：区别于release<br>重要概念：<br>  EOP：程序指令入口点即第一条指令的入口点<br>  OEP:原入口点，壳里的概念。加如壳之后入口点会变化，但执行过程中代码还会在原入口点执行即OEP<br>  EPO模糊，病毒概念，病毒在EOP中感染，会用到EPOA的技术<br>  壳：“壳”（Shell）通常指加壳技术（Packing），是一种对可执行文件（如 exe、elf、mach-o 等）进行保护的手段，目的是隐藏原始程序的代码逻辑，增加逆向分析的难度。<br>  imagebase:0x4000000(不修改情况下)指的是可执行文件（如 EXE、DLL 等 PE 格式文件）被操作系统加载到内存时的 “首选起始地址”。<br>  VA：虚拟地址（Virtual Address））采用 虚拟内存管理，程序不会直接操作物理内存（硬件实际的内存地址），而是通过 “虚拟地址” 间接访问。虚拟地址由操作系统和 CPU 的内存管理单元（MMU）转换为物理地址，对程序来说是 “透明” 的。<br>  RVA:RVA 是 相对虚拟地址（Relative Virtual Address） 的缩写，指的是相对于程序加载到内存的基地址（ImageBase）的偏移量。RVA &#x3D; VA - ImageBase<br>                    VA &#x3D; ImageBase + RVA<br>   voffset: 通常是 virtual offset（虚拟偏移量） 的缩写，指的是相对于某个具体虚拟地址（VA）的偏移量，用于描述内存中某一位置与另一个基准虚拟地址之间的距离。与 RVA（相对虚拟地址，相对于程序整体加载基地址 ImageBase 的偏移）不同，voffset 的 “基准” 更灵活 —— 它可以是任意一个虚拟地址（比如某个结构体的起始地址、某个节（section）的起始地址、某个函数的入口地址等），表示从这个基准 VA 开始向后偏移的字节数。<br>   roffset:通常是 relative offset（相对偏移量） 的缩写，指的是相对于某一特定基准地址（而非全局基准）的偏移量。它是一个更通用的概念，用于描述 “某位置与一个局部基准点之间的距离”。<br>工具了解pe<br>peid:能识别壳<br>REtool:<br> PID   ：在计算机领域，PID 特指 “进程 ID（Process ID）”，是操作系统（如 Windows、Linux、macOS 等）为每个正在运行的进程（程序的执行实例）分配的唯一数字编号。 </p><p>程序与进程和线程<br>a.程序<br>是存储在磁盘上的静态文件，由代码（指令）、数据（常量、变量定义）和相关资源（如配置、图标等）组成，是 “未执行的指令集合”。<br>特点：<br>静态存在：不占用 CPU、内存等系统资源，仅作为文件保存在存储介质（如硬盘）中。<br>可复用性：同一个程序可以被多次加载执行（例如多次双击 “记事本.exe”，会启动多个进程）。<br>b.进程是程序的一次动态执行过程，是操作系统进行资源分配（内存、CPU 时间片等）的基本单位。当用户运行一个程序时，操作系统会加载程序到内存，为其分配资源，并创建一个进程来管理执行过程。<br>特点：<br>动态生命周期：有创建（如双击程序）、运行、暂停、终止（如关闭窗口）等状态。<br>独立资源：每个进程拥有独立的内存空间（代码段、数据段、堆、栈），进程间的内存相互隔离（默认不可直接访问）。<br>系统开销较大：进程切换（如 CPU 从一个进程切换到另一个）需要保存和恢复整个进程的上下文（内存状态、寄存器等），开销较高。<br>c.线程是进程内的一个执行流，是 CPU 调度（分配 CPU 时间）的基本单位。一个进程可以包含多个线程，这些线程共享进程的内存空间和资源（如代码段、全局变量、打开的文件句柄等），但每个线程有自己独立的栈（局部变量）和寄存器。  </p><p>第二课<br>C语言中的各个进制表达方法 </p><ol><li>八进制以0作为前缀</li><li>c语言中并没有单独二进制表示方法</li><li>16进制0-9，a-f，且以0x为前缀</li><li></li></ol><p>汇编语言中<br> 十六进制1aH<br> 八进制17o<br> 十进制12D<br> 二进制：110B<br>进制转换</p><ol><li>表格法十进制转二进制<br>1024   512  256  128  64  32  16  8  4  2  1<br>如47在32至64间  故在64下标0，在32下表1 ，47-32 &#x3D;15故16下标08下标1，以此内推<br>若要以1个字节为8位故47应该表达为00101111，若为2字节则在前添0直至16位<br>若有小数则用同样方法，只不过在表格右边加上2的-1，-2，-3…次方，在整数和小数连接处以’.‘连接</li><li>二进制转十六进制<br>十六进制每一位对应二进制四位如47 二进制为00101111，分组，1111转化为F，0010变为2，合起来47十六进制为2f<br>十六进制特点<br>十六进制1位对应二进制4位，故2位对应一个字节，能直接观察这个数在内存中每个字节的内容，一位占4bite</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基础命令</title>
    <link href="/2025/10/11/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/10/11/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>在Linux中一切皆为文件，文件夹名为目录。Linux的命令是模块化的通过空格来体现模块，故在使用命令时要注意这一点<br>linux如何获取管理员权限<br>一.临时权限（低风险，但麻烦）命令：sudo apt update<br>二.永久权限：su  # 切换到root用户<br>            # 输入root用户的密码（若未设置root密码，可能需要先通过sudo设置）<br>            exit  # 回到普通用户<br>注意：1.安全风险：永久使用 root 权限可能因误操作（如删除系统文件）导致系统崩溃，建议优先使用sudo获取<br>        临时权限。<br>      2.root 密码：部分 Linux 发行版（如 Ubuntu）默认禁用 root 密码，需通过sudo passwd root设置 root 密码后才能使用su切换。<br>      3.权限回收：若要取消某个用户的sudo权限，可通过visudo删除对应配置行。</p><ol><li><p>cd（cd ~）：默认切换到当前用户的家目录<br>cd ..：切换到父目录,..表示当前目录的上一级目录（父目录）<br>cd .：切换到当前目录（无实际意义）<br>cd -：切换到上一次所在的目录<br>cd &#x2F;：切换到根目录</p></li><li><p>ls:查看当前目录下的文件和子目录<br>ls -a:查看更详细的目录<br>ls -l:以长格式显示文件 &#x2F; 目录的详细信息，每行代表一个文件 &#x2F; 目录，输出包含 7 个核心字<br>例如-rw-r–r–  1  user  group  1024  Oct 14 15:30  file.txt<br> 各字段含义：<br> 1.权限位（-rw-r–r–）：共 10 位<br> a.第 1 位：文件类型（-普通文件，d目录，l软链接，b块设备等）<br> b.后 9 位：权限（分 3 组，每组 3 位，分别对应所有者 u、所属组 g、其他用户 o的权限）r（读，4）、w（写，2）、x（执行，1）， -表示无权限<br>  ps.示例中：所有者有rw（读写），组用户和其他用户有r（只读）。<br> c.硬链接数（1）：文件被硬链接的次数（目录默认是 2，含.和..）。<br> d.所有者（user）：文件的所属用户。<br> e. 所属组（group）：文件的所属用户组。<br> f.大小（1024）：文件大小（单位字节，目录显示为 4096 等固定值）。<br> g.修改时间（Oct 14 15:30）：文件最后一次内容修改的时间。<br> h.文件名 &#x2F; 目录名（file.txt）：文件或目录的名称。</p></li><li><p>touch :创建文件<br>touch  file1 file2 file3:创建三个文件<br>touch &#x2F;目录&#x2F;文件名：在指定目录中创建文件</p></li><li><p>cat :查看文件内容<br>cat file1 file2 file3:查看多个文件<br>cat &gt; [新文件名]：创建新文件并写入内容,ctrl+d建是退出编辑模式<br>cat &gt;&gt; [文件名]：向已有文件追加内容<br>cat [文件1] [文件2] &gt; [目标文件]：合并多个文件到新文件</p></li><li><p>管道符（|）的使用<br>管道符用于将前一个命令的输出作为后一个命令的输入，实现命令组合。<br>格式：命令1 | 命令2<br>例如<br><img src="/.io//%E4%BE%8B%E5%AD%901.png" alt="先用ls将桌面上的文件全列举出来，再用greb命令将其中带有txt的筛出来"></p></li><li><p>mv 如何重命名文件 mv 命令本质是 “移动文件”，当源文件和目标路径在同一目录时，就是 “重命名”。<br>格式：mv .&#x2F;现在目录的子目录，目标文件的父目录（有点拗口）&#x2F;目标文件 .&#x2F;同上&#x2F;目的地<br>！<a href="%E4%BE%8B%E5%AD%902.png">例3</a></p></li><li><p>ln -s:软连接，旨在简化路径，其用途类似于Python中import 模块名 as 别名<br>注意：若源文件移动位置，软连接会失效，需重新创建。<br>例：ln -s &#x2F;home&#x2F;cjy&#x2F;桌面&#x2F;b.txt  toc  #将b.txt文件简称为toc</p></li><li><p>cp:复制文件</p><h1 id="复制当前目录的-note-txt-到-home-user-backup-目录下"><a href="#复制当前目录的-note-txt-到-home-user-backup-目录下" class="headerlink" title="复制当前目录的 note.txt 到 &#x2F;home&#x2F;user&#x2F;backup 目录下"></a>复制当前目录的 note.txt 到 &#x2F;home&#x2F;user&#x2F;backup 目录下</h1><p>cp note.txt &#x2F;home&#x2F;user&#x2F;backup&#x2F;</p><h1 id="复制文件并在目标位置重命名（若目标是新文件名）"><a href="#复制文件并在目标位置重命名（若目标是新文件名）" class="headerlink" title="复制文件并在目标位置重命名（若目标是新文件名）"></a>复制文件并在目标位置重命名（若目标是新文件名）</h1><p>cp data.csv &#x2F;tmp&#x2F;archive&#x2F;data_backup.csv</p><p>注：复制目录需加 -r（递归）：cp -r .&#x2F;docs &#x2F;mnt&#x2F;usb&#x2F;</p></li><li><p>绝对路径和相对路径<br>   绝对路径：从根目录（&#x2F;）开始的完整路径，唯一确定文件位置。<br>   示例：&#x2F;home&#x2F;user&#x2F;downloads&#x2F;file.zip、&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。<br>   相对路径：相对于当前所在目录的路径，依赖当前位置。<br>   符号：.&#x2F; 表示当前目录（可省略），..&#x2F; 表示上一级目录。</p></li></ol><p>   示例：<br>   若当前在 &#x2F;home&#x2F;user，则 .&#x2F;docs&#x2F;note.txt 等价于 docs&#x2F;note.txt（相对路径），对应绝对路径 &#x2F;home&#x2F; user&#x2F;docs&#x2F;note.txt。<br>   ..&#x2F;public&#x2F;index.html 表示 “上一级目录的 public 文件夹中的 index.html”。<br>11. 设置用户密码、root 密码及切换用户<br>    设置密码<br>    当前用户改密码：passwd（输入原密码，再输新密码）。<br>    管理员给其他用户设密码：sudo passwd 用户名（需 sudo 权限）。<br>    设置 root 密码（默认可能未启用）：sudo passwd root（输入当前用户密码，再设 root 新密码）。<br>    切换用户<br>    切换到普通用户：su - 用户名（- 表示加载目标用户的环境变量）。<br>    切换到 root 用户：su - root（需输入 root 密码）或 sudo -i（直接获取 root 环境，无需 root 密码，需当前用户在 sudoers 列表）。<br>    退出切换的用户：exit 或 Ctrl+D。<br>12. 文本编辑器的基本使用（写入、保存）<br>    简单编辑器 nano（推荐新手）<br>    打开 &#x2F; 创建文件：nano 文件名（如 nano test.txt）。<br>    写入内容：直接键盘输入即可。<br>    保存：按 Ctrl+O（提示确认文件名，回车确认）。<br>    退出：按 Ctrl+X。<br>13. 压缩文件<br>   a.tar命令<br>    压缩：tar -czf 压缩包名。tar.gz 源文件&#x2F;目录（此处指的是目标文件在压缩包的那个位置）<br>    解压：tar -xzf 压缩包名.tar.gz  # x&#x3D;解压，z&#x3D;gzip，f&#x3D;指定文件名<br>   b.zip格式<br>   压缩：zip 压缩包名.zip 文件1 文件2 目录<br>   解压：将zip改为unzip<br>14.  查看基本的日志文件<br>    cat &#x2F;var&#x2F;log&#x2F;syslog  # 查看全部内容（适合小文件）<br>   tail -n 20 &#x2F;var&#x2F;log&#x2F;auth.log  # 查看最后20行</p><p>   tail -f &#x2F;var&#x2F;log&#x2F;syslog  # 实时跟踪新增内容（按 Ctrl+C 退出）</p><ol start="13"><li><p>常用的二进制文件目录<br>&#x2F;bin：基本系统命令（如 ls、cp，所有用户可执行）。<br>&#x2F;sbin：系统管理命令（如 reboot、ifconfig，通常需 root 权限）。<br>&#x2F;usr&#x2F;bin：用户常用命令（如 python、git）。<br>&#x2F;usr&#x2F;sbin：用户系统管理命令（如 nginx、apache2）。<br>&#x2F;usr&#x2F;local&#x2F;bin：本地编译安装的程序（如手动安装的软件）。</p></li><li><p>给文件赋权（chmod）<br>  chmod 用于修改文件 &#x2F; 目录的读写执行权限：<br> 数字法（推荐）<br> 权限对应数字：r&#x3D;4，w&#x3D;2，x&#x3D;1，每组权限为 3 个数字之和（所有者 u、组 g、其他 o）。REAd&#x3D;r write &#x3D;w   execute(执行) &#x3D;x<br>  示例：<br> bash<br>  chmod 755 script.sh  # 所有者：rwx（7&#x3D;4+2+1），组和其他：rx（5&#x3D;4+1）<br>  chmod 644 note.txt   # 所有者：rw（6&#x3D;4+2），组和其他：r（4）</p></li><li><p>递归删除<br>删除目录及其所有子文件 &#x2F; 子目录，用 rm -r（r&#x3D; 递归），强制删除加 -f（不提示）。<br>示例：<br>bash<br>rm -r old_dir&#x2F;        # 删除 old_dir 及内容（会提示确认）<br>rm -rf temp&#x2F;          # 强制删除 temp 及内容</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2025/10/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/10/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>一  工具准备<br>    1.github账号注册（略）<br>    2.下载git<br>      在下载完成后鼠标右键 git bush here<br>      粘贴以下命令git config –global user.name “Your Name”<br>git config –global user.email “<a href="mailto:&#101;&#x6d;&#97;&#105;&#108;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#109;">email@example.com</a>“<br>    3.下载node js<br>    下载完成后输入node -v和npm -v检查是否安装成功<br>二    创建仓库<br>  进入github网站中点击右上角的头像，再点击Your repositonries点击new按钮，创建自己的仓库填写自己的仓库名，格式为&lt;用户名&gt;.github.io，然后点击Create repository点击创建新文件创建一个新文件，作为我们网站的主页新文件的名字必须为index.html，内容随意，填写之后点击Commit new file提交，<br>四 hexo部署<br>  1.安装 Hexo</p><p>   npm install -g hexo-cli<br>  2.查看版本chhexo -v<br>  3.初始化<br>  hexo init hexo-blog<br>   cd hexo-blog<br>   npm install<br>  4.本地启动<br>   hexo g<br>   hexo server<br>  5.创建文章<br>    Hexo 博客目录中的 _config.yml，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。<br>    post_asset_folder: true<br>    执行如下命令创建一篇新文章，名为《测试文章》<br>    hexo new post 测试文章<br>    若要添加图片<br>      1.将hexo-blog文件夹拉入编辑器（如ws code中）打开post新建文件image<br>      2在image中加入图片<br>      3在目标文件中加入<img src="/images/%E3%80%82%E5%9B%BE%E7%89%87%E5%90%8Djpg" alt="图片描述">代码在末尾</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机搭建</title>
    <link href="/2025/10/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/10/11/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>一 准备工作<br>   1.下载vmwear<br>   2.访问<a href="https://mirrors.tuna.tsinghua.edu.cn/%EF%BC%88%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%EF%BC%89">https://mirrors.tuna.tsinghua.edu.cn/（清华大学镜像网站）</a><br>   3.下载iso文件<br>二 具体操作<br>   1.点击创建虚拟机。选择自定义。<br>   2.选择稍后安装操作系统<br>   3.选择Linux操作系统<br>   4.更改磁盘<br>   5.一直跟着推荐走直至完成</p><p>ps:笔者在配置时出现以下报错<br>    Mware Workstation 不可恢复错误: (svga)</p><p>Exception 0xc0000005 (access violation) has occurred.</p><p>日志文件位于“D:\vmwear工具\vmweardata\Ubuntu 64 位 (2)\vmware.log”中。  </p><p>您可以请求支持。  </p><p>要收集数据提交给 VMware 技术支持，请选择“帮助”菜单中的“收集支持数据”。</p><p>也可以直接在 Workstation 文件夹中运行“vm-support”脚本。</p><p>我们将根据您的技术支持权利做出回应。</p><p>目前尚未找到解决方案</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/10/11/%E4%BD%A0%E5%A5%BD/"/>
    <url>/2025/10/11/%E4%BD%A0%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/.io//1.jpg" alt="图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
      <tag>示例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2025/10/11/Hello-Hexo/"/>
    <url>/2025/10/11/Hello-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="这是文章正文"><a href="#这是文章正文" class="headerlink" title="这是文章正文"></a>这是文章正文</h1><p>这里可以使用 Markdown 语法编写内容，例如：</p><ul><li>列表项 1</li><li>列表项 2</li></ul><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>正文内容…</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/10/09/hello-world/"/>
    <url>/2025/10/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/images/1.jpg" alt="图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
